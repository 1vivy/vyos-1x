#!/usr/bin/env python3
#
# Copyright (C) 2021 VyOS maintainers and contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or later as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# T2199: Remove unavailable nodes due to XML/Python implementation using nftables
#        monthdays: nftables does not have a monthdays equivalent
#        utc: nftables userspace uses localtime and calculates the UTC offset automatically
# T4178: Update tcp flags to use multi value node

from sys import argv
from sys import exit

from vyos.configtree import ConfigTree
from vyos.ifconfig import Section

if (len(argv) < 1):
    print("Must specify file name!")
    exit(1)

file_name = argv[1]

with open(file_name, 'r') as f:
    config_file = f.read()

base = ['firewall']
config = ConfigTree(config_file)

if not config.exists(base):
    # Nothing to do
    exit(0)

if config.exists(base + ['name']):
    for name in config.list_nodes(base + ['name']):
        if config.exists(base + ['name', name, 'rule']):
            for rule in config.list_nodes(base + ['name', name, 'rule']):
                rule_time = base + ['name', name, 'rule', rule, 'time']
                rule_tcp_flags = base + ['name', name, 'rule', rule, 'tcp', 'flags']

                if config.exists(rule_time + ['monthdays']):
                    config.delete(rule_time + ['monthdays'])

                if config.exists(rule_time + ['utc']):
                    config.delete(rule_time + ['utc'])

                if config.exists(rule_tcp_flags):
                    tmp = config.return_value(rule_tcp_flags)
                    config.delete(rule_tcp_flags)
                    for flag in tmp.split(","):
                        if flag[0] == '!':
                            config.set(rule_tcp_flags + ['not', flag[1:].lower()])
                        else:
                            config.set(rule_tcp_flags + [flag.lower()])

if config.exists(base + ['ipv6-name']):
    for name in config.list_nodes(base + ['ipv6-name']):
        if config.exists(base + ['ipv6-name', name, 'rule']):
            for rule in config.list_nodes(base + ['ipv6-name', name, 'rule']):
                rule_time = base + ['ipv6-name', name, 'rule', rule, 'time']
                rule_tcp_flags = base + ['ipv6-name', name, 'rule', rule, 'tcp', 'flags']

                if config.exists(rule_time + ['monthdays']):
                    config.delete(rule_time + ['monthdays'])

                if config.exists(rule_time + ['utc']):
                    config.delete(rule_time + ['utc'])

                if config.exists(rule_tcp_flags):
                    tmp = config.return_value(rule_tcp_flags)
                    config.delete(rule_tcp_flags)
                    for flag in tmp.split(","):
                        if flag[0] == '!':
                            config.set(rule_tcp_flags + ['not', flag[1:].lower()])
                        else:
                            config.set(rule_tcp_flags + [flag.lower()])

try:
    with open(file_name, 'w') as f:
        f.write(config.to_string())
except OSError as e:
    print("Failed to save the modified config: {}".format(e))
    exit(1)
