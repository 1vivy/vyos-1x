#!/usr/bin/env python3
#
# Copyright (C) 2019 VyOS maintainers and contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or later as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#

import sys
from vyos.configtree import ConfigTree

if (len(sys.argv) < 1):
    print("Must specify file name!")
    sys.exit(1)

file_name = sys.argv[1]

with open(file_name, 'r') as f:
    config_file = f.read()

config = ConfigTree(config_file)

def migrate_neighbor(config, neighbor_path, neighbor):
    if config.exists(neighbor_path):
        neighbors = config.list_nodes(neighbor_path)
        for neighbor in neighbors:
            # Move peer-group
            if config.exists(neighbor_path + [neighbor, 'peer-group']):
                peer_group = config.return_value(neighbor_path + [neighbor, 'peer-group'])
                config.set(neighbor_path + [neighbor] + af_path + ['peer-group'], value=peer_group)
                config.delete(neighbor_path + [neighbor, 'peer-group'])

if not config.exists(['protocols', 'bgp']):
    # Nothing to do
    sys.exit(0)
else:
    # Just to avoid writing it so many times
    af_path = ['address-family', 'ipv4-unicast']

    # Check if BGP is actually configured and obtain the ASN
    asn_list = config.list_nodes(['protocols', 'bgp'])
    if asn_list:
        # There's always just one BGP node, if any
        asn = asn_list[0]
        bgp_path = ['protocols', 'bgp', asn]
    else:
        # There's actually no BGP, just its empty shell
        sys.exit(0)

    ## Move global IPv4-specific BGP options to "address-family ipv4-unicast"

    ## Migrate neighbor options
    neighbor_path = ['protocols', 'bgp', asn, 'neighbor']
    if config.exists(neighbor_path):
        neighbors = config.list_nodes(neighbor_path)
        for neighbor in neighbors:
            migrate_neighbor(config, neighbor_path, neighbor)

    try:
        with open(file_name, 'w') as f:
            f.write(config.to_string())

    except OSError as e:
        print("Failed to save the modified config: {}".format(e))
        sys.exit(1)
