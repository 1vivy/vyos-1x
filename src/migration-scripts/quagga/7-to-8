#!/usr/bin/env python3
#
# Copyright (C) 2021 VyOS maintainers and contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or later as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# - T548, Migrate "bgp xxx maximum-paths ebgp/ibgp xxx" to
#  "bgp xxx address-family ipv4-unicast maximum-paths ebgp/ibgp xxx"

import sys
from vyos.configtree import ConfigTree

if (len(sys.argv) < 2):
    print("Must specify file name!")
    sys.exit(1)

file_name = sys.argv[1]

with open(file_name, 'r') as f:
    config_file = f.read()

base = ['protocols', 'bgp']
config = ConfigTree(config_file)

if not config.exists(base):
    # Nothing to do
    sys.exit(0)

# Check if BGP is actually configured and obtain the ASN
asn_list = config.list_nodes(base)
if asn_list:
    # There's always just one BGP node, if any
    bgp_base = base + [asn_list[0]]

    # Check if "bgp xxx maximum-paths" exists, migrate to "bgp xxx address-family ipv4-unicast maximum-paths"
    max_path = bgp_base + ['maximum-paths']
    if config.exists(max_path):
        if config.exists(max_path + ['ebgp']):
            max_ebgp = config.return_value(max_path + ['ebgp'])
            config.set(bgp_base + ['address-family', 'ipv4-unicast', 'maximum-paths', 'ebgp'], max_ebgp)
        if config.exists(max_path + ['ibgp']):
            max_ibgp = config.return_value(max_path + ['ibgp'])
            config.set(bgp_base + ['address-family', 'ipv4-unicast', 'maximum-paths', 'ibgp'], max_ibgp )
        config.delete(max_path)

try:
    with open(file_name, 'w') as f:
        f.write(config.to_string())
except OSError as e:
    print("Failed to save the modified config: {}".format(e))
    sys.exit(1)
