#!/usr/bin/env python3
#
# Copyright (C) 2020 VyOS maintainers and contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or later as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# VLAN 1 command line migration for bridge aware
# https://phabricator.vyos.net/T3137

import sys
from vyos.configtree import ConfigTree

if __name__ == '__main__':
    if (len(sys.argv) < 1):
        print("Must specify file name!")
        sys.exit(1)

    file_name = sys.argv[1]

    with open(file_name, 'r') as f:
        config_file = f.read()

    config = ConfigTree(config_file)
    base = ['interfaces', 'bridge']
    if not config.exists(base):
        # Nothing to do
        sys.exit(0)

    vlan_add = set()

    for interface in config.list_nodes(base):
        vif_1_old_base = base + [interface, 'vif', '1']
        if config.exists(vif_1_old_base):
            address_base = vif_1_old_base + ['address']
            if config.exists(address_base):
                address = config.return_values(address_base)
                for addr in address:
                    config.set(base + [interface, 'address'],addr,False)
            config.delete(vif_1_old_base)

        # Get all VLANs
        member_base = base + [interface, 'member', 'interface']
        if config.exists(member_base):
            for mem_intf in config.list_nodes(member_base):
                native_vlan_base = member_base + [mem_intf,'native-vlan']
                allowed_vlan_base = member_base + [mem_intf,'allowed-vlan']
                if config.exists(native_vlan_base):
                    vlan = config.return_values(native_vlan_base)[0]
                    vlan_add.add(vlan)

                if config.exists(allowed_vlan_base):
                    vlan_ranges = config.return_values(allowed_vlan_base)
                    for vlan_range in vlan_ranges:
                        vlan_data = vlan_range.split('-')
                        for vlan in range(int(vlan_data[0]),int(vlan_data[1])+1):
                            vlan_add.add(vlan)

        # Start configuration
        if len(vlan_add):
            for vlan in vlan_add:
                if int(vlan) != 1:
                    config.set(base + [interface, 'vif', vlan])
            config.set(base + [interface, 'enable-vlan'])
        
        
        config.set_tag(base + [interface])


    try:
        with open(file_name, 'w') as f:
            f.write(config.to_string())
    except OSError as e:
        print("Failed to save the modified config: {}".format(e))
        sys.exit(1)
